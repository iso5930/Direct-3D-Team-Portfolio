#include "StdAfx.h"
#include "LoadMgr.h"

IMPLEMENT_SINGLETON(CLoadMgr)

CLoadMgr::CLoadMgr()
{
}

CLoadMgr::~CLoadMgr()
{
	Release();
}

void CLoadMgr::Initialize()
{
}

int CLoadMgr::Update()
{
	return 0;
}

void CLoadMgr::Render()
{
}

void CLoadMgr::Release()
{
}

// ForBase
void CLoadMgr::LoadForBase()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - Cursor
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Cursor/White.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Cursor_White"), pTexture);

	// AddTexture - Mouse
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/Arrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_Arrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/Hand.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_Hand"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/PickInven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_PickInven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/PickEquip.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_PickEquip"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/PickStorage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_PickStorage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/PickStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_PickStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/Decompose.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_Decompose"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Mouse/PickFollowerEquip.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Mouse_PickFollowerEquip"), pTexture);

	// AddTexture - Back
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Back/Load.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Back_Load"), pTexture);

	// AddTexture - Window
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Setting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Setting"), pTexture);

	// AddTexture - Scroll
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Scroll/Back_Vertical.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Scroll_Back_Vertical"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Scroll/Over_Vertical.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Scroll_Over_Vertical"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Scroll/Down_Vertical.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Scroll_Down_Vertical"), pTexture);

	// AddTexture - Button
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Tristram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Tristram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Tristram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Tristram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Tristram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Tristram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_TristramField.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_TristramField"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_TristramField.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_TristramField"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_TristramField.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_TristramField"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Cathedral_F1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Cathedral_F1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Cathedral_F1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Cathedral_F1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Cathedral_F1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Cathedral_F1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Cathedral_F2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Cathedral_F2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Cathedral_F2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Cathedral_F2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Cathedral_F2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Cathedral_F2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Cathedral_F3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Cathedral_F3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Cathedral_F3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Cathedral_F3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Cathedral_F3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Cathedral_F3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Cathedral_F4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Cathedral_F4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Cathedral_F4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Cathedral_F4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Cathedral_F4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Cathedral_F4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_RoyalChamber.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_RoyalChamber"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_RoyalChamber.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_RoyalChamber"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_RoyalChamber.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_RoyalChamber"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_QuestItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_QuestItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_QuestItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_QuestItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_QuestItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_QuestItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GemItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GemItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GemItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GemItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GemItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GemItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_MaterialItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_MaterialItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_MaterialItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_MaterialItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_MaterialItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_MaterialItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GoldPlus.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GoldPlus"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GoldPlus.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GoldPlus"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GoldPlus.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GoldPlus"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GoldMinus.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GoldMinus"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GoldMinus.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GoldMinus"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GoldMinus.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GoldMinus"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_NormalItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_NormalItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_NormalItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_NormalItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_NormalItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_NormalItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_MagicItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_MagicItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_MagicItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_MagicItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_MagicItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_MagicItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_UniqueItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_UniqueItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_UniqueItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_UniqueItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_UniqueItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_UniqueItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_LegendItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_LegendItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_LegendItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_LegendItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_LegendItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_LegendItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_SetItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_SetItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_SetItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_SetItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_SetItem.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_SetItem"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Detail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Detail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Detail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Detail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Detail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Detail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_LevelUp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_LevelUp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_LevelUp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_LevelUp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_LevelUp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_LevelUp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_CheatKey.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_CheatKey"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_CheatKey.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_CheatKey"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_CheatKey.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_CheatKey"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Button0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Button0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Button0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Button0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Button0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Button0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Confirm2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Confirm2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Confirm2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Confirm2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Confirm2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Confirm2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Cancel2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Cancel2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Cancel2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Cancel2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Cancel2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Cancel2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Left1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Left1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Left1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Left1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Left1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Left1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Right1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Right1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Right1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Right1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Right1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Right1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Confirm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Confirm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Confirm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Confirm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Confirm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Confirm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Destroy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Destroy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Destroy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Destroy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Destroy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Destroy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_X.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_X"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_X.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_X"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_X.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_X"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Access.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Access"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Access.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Access"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Access.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Access"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GameContinue.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GameContinue"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GameContinue.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GameContinue"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GameContinue.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GameContinue"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_CharacterChange.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_CharacterChange"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_CharacterChange.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_CharacterChange"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_CharacterChange.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_CharacterChange"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_CharacterCreate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_CharacterCreate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_CharacterCreate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_CharacterCreate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_CharacterCreate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_CharacterCreate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_CharacterSelect.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_CharacterSelect"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_CharacterSelect.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_CharacterSelect"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_CharacterSelect.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_CharacterSelect"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Cancel.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Cancel"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Cancel.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Cancel"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Cancel.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Cancel"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_BarbarianJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_BarbarianJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_BarbarianJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_BarbarianJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_BarbarianJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_BarbarianJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DemonHunterJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DemonHunterJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DemonHunterJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DemonHunterJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DemonHunterJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DemonHunterJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_MonkJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_MonkJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_MonkJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_MonkJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_MonkJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_MonkJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WitchDoctorJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WitchDoctorJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WitchDoctorJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WitchDoctorJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WitchDoctorJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WitchDoctorJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WizardJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WizardJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WizardJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WizardJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WizardJob.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WizardJob"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Back.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Back"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Back.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Back"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Back.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Back"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Create.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Create"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Create.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Create"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Create.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Create"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Male.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Male"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Male.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Male"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Male.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Male"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Female.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Female"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Female.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Female"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Female.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Female"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_BarbarianMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_BarbarianMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_BarbarianMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_BarbarianMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_BarbarianMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_BarbarianMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_BarbarianFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_BarbarianFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_BarbarianFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_BarbarianFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_BarbarianFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_BarbarianFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DemonHunterMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DemonHunterMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DemonHunterMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DemonHunterMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DemonHunterMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DemonHunterMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DemonHunterFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DemonHunterFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DemonHunterFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DemonHunterFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DemonHunterFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DemonHunterFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_MonkMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_MonkMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_MonkMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_MonkMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_MonkMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_MonkMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_MonkFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_MonkFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_MonkFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_MonkFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_MonkFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_MonkFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WitchDoctorMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WitchDoctorMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WitchDoctorMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WitchDoctorMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WitchDoctorMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WitchDoctorMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WitchDoctorFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WitchDoctorFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WitchDoctorFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WitchDoctorFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WitchDoctorFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WitchDoctorFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WizardMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WizardMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WizardMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WizardMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WizardMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WizardMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WizardFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WizardFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WizardFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WizardFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WizardFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WizardFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Up.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Up"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Up.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Up"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Up.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Up"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Down.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Down"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Down.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Down"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Down.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Down"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_CharacterDelete.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_CharacterDelete"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_CharacterDelete.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_CharacterDelete"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_CharacterDelete.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_CharacterDelete"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Advice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Advice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Advice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Advice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Advice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Advice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Producer.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Producer"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Producer.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Producer"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Producer.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Producer"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Setting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Setting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Setting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Setting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Setting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Setting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_SkillWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_SkillWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_SkillWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_SkillWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_SkillWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_SkillWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_InvenWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_InvenWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_InvenWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_InvenWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_InvenWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_InvenWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_QuestWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_QuestWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_QuestWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_QuestWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_QuestWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_QuestWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_AchieveWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_AchieveWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_AchieveWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_AchieveWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_AchieveWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_AchieveWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_SettingWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_SettingWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_SettingWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_SettingWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_SettingWindow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_SettingWindow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Storage0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Storage0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Storage0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Storage0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Storage0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Storage0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Storage1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Storage1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Storage1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Storage1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Storage1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Storage1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Storage2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Storage2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Storage2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Storage2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Storage2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Storage2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Storage3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Storage3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Storage3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Storage3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Storage3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Storage3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Storage4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Storage4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Storage4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Storage4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Storage4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Storage4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WeaponStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WeaponStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WeaponStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WeaponStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WeaponStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WeaponStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_ArmorStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_ArmorStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_ArmorStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_ArmorStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_ArmorStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_ArmorStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_AccessoryStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_AccessoryStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_AccessoryStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_AccessoryStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_AccessoryStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_AccessoryStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_PuzzleStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_PuzzleStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_PuzzleStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_PuzzleStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_PuzzleStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_PuzzleStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_RepurchaseStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_RepurchaseStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_RepurchaseStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_RepurchaseStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_RepurchaseStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_RepurchaseStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Left.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Left"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Left.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Left"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Left.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Left"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Right.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Right"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Right.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Right"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Right.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Right"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_WeaponFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_WeaponFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_WeaponFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_WeaponFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_WeaponFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_WeaponFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_ArmorFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_ArmorFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_ArmorFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_ArmorFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_ArmorFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_ArmorFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DecompositionFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DecompositionFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DecompositionFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DecompositionFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DecompositionFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DecompositionFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Decompose.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Decompose"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Decompose.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Decompose"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Decompose.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Decompose"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DecomposeNormal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DecomposeNormal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DecomposeNormal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DecomposeNormal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DecomposeNormal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DecomposeNormal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DecomposeMagic.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DecomposeMagic"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DecomposeMagic.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DecomposeMagic"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DecomposeMagic.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DecomposeMagic"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DecomposeUnique.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DecomposeUnique"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DecomposeUnique.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DecomposeUnique"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DecomposeUnique.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DecomposeUnique"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_OpenCategory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_OpenCategory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_OpenCategory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_OpenCategory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_OpenCategory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_OpenCategory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_CloseCategory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_CloseCategory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_CloseCategory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_CloseCategory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_CloseCategory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_CloseCategory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Formula.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Formula"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Formula.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Formula"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Formula.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Formula"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_ItemMake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_ItemMake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_ItemMake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_ItemMake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_ItemMake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_ItemMake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GemFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GemFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GemFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GemFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GemFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GemFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_AccessoryFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_AccessoryFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_AccessoryFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_AccessoryFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_AccessoryFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_AccessoryFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_DisenchantStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_DisenchantStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_DisenchantStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_DisenchantStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_DisenchantStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_DisenchantStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Disenchant.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Disenchant"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Disenchant.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Disenchant"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Disenchant.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Disenchant"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GraphicSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GraphicSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GraphicSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GraphicSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GraphicSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GraphicSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_SoundSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_SoundSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_SoundSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_SoundSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_SoundSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_SoundSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GameSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GameSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GameSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GameSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GameSetting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GameSetting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_None.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_None"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_None.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_None"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_None.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_None"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_Using.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_Using"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_Using.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_Using"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_Using.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_Using"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_RadialBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_RadialBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_RadialBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_RadialBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_RadialBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_RadialBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_GaussianBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_GaussianBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_GaussianBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_GaussianBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_GaussianBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_GaussianBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_MotionBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_MotionBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_MotionBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_MotionBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_MotionBlur.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_MotionBlur"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_NormalShadow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_NormalShadow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_NormalShadow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_NormalShadow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_NormalShadow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_NormalShadow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_CascadeShadow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_CascadeShadow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_CascadeShadow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_CascadeShadow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_CascadeShadow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_CascadeShadow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_ExponentFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_ExponentFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_ExponentFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_ExponentFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_ExponentFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_ExponentFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_ExponentSquareFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_ExponentSquareFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_ExponentSquareFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_ExponentSquareFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_ExponentSquareFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_ExponentSquareFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_HeightFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_HeightFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_HeightFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_HeightFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_HeightFog.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_HeightFog"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Back_List.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Back_List"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Over_List.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Over_List"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Button/Down_List.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Button_Down_List"), pTexture);

	// AddBuffer - Base
	CBufferMgr::GetInstance()->Initialize();
	CBufferMgr::GetInstance()->AddBuffer(_T("Trail"), new CTrail);
	CBufferMgr::GetInstance()->AddBuffer(_T("Rect"), new CRect);
	CBufferMgr::GetInstance()->AddBuffer(_T("Screen"), new CScreen);
	CBufferMgr::GetInstance()->AddBuffer(_T("Cube"), new CCube);
	CBufferMgr::GetInstance()->AddBuffer(_T("Energy"), new CEnergy);
	CBufferMgr::GetInstance()->AddBuffer(_T("Particle"), new CParticle);
	CBufferMgr::GetInstance()->AddBuffer(_T("AlphaBox"), new CStaticMesh(_T("../Resource/Mesh/Prob/AlphaBox/"), _T("AlphaBox.X")));

	// AddTexture - Effect
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Hit.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Hit"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Dust10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Dust10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DestoryEffect/Destory_Bomb31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Destory_Bomb31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Fire/fire01.dds"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Fire_Diff"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Fire/noise01.dds"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Fire_Noise"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Fire/alpha01.dds"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Fire_Alpha"), pTexture);
	
	// AddBuffer - Water
	CBufferMgr::GetInstance()->AddBuffer(_T("E09_S16_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("E09_S16_Water.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("E10_S14_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("E10_S14_Water.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Old_E03_S04_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("Old_E03_S04_Water.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Old_E03_S03_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("Old_E03_S03_Water.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Old_E03_S02_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("Old_E03_S02_Water.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Old_E03_S01_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("Old_E03_S01_Water.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Old_E03_N01_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("Old_E03_N01_Water.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Skeletal_Throne_Water"), new CStaticMesh(_T("../Resource/Mesh/Effect/Water/"), _T("Skeletal_Throne_Water.X")));
}
void CLoadMgr::UnloadForBase()
{
	// RemoveTexture - Cursor
	CTextureMgr::GetInstance()->RemoveTexture(_T("Cursor_White"));

	// RemoveTexture - Mouse
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_Arrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_Hand"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_PickInven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_PickEquip"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_PickStorage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_PickStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_Decompose"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Mouse_PickFollowerEquip"));

	// RemoveTexture - Back
	CTextureMgr::GetInstance()->RemoveTexture(_T("Back_Load"));

	// RemoveTexture - Window
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Setting"));

	// RemoveTexture - Scroll
	CTextureMgr::GetInstance()->RemoveTexture(_T("Scroll_Back_Vertical"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Scroll_Over_Vertical"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Scroll_Down_Vertical"));

	// RemoveTexture - Button
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Tristram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Tristram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Tristram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_TristramField"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_TristramField"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_TristramField"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Cathedral_F1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Cathedral_F1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Cathedral_F1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Cathedral_F2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Cathedral_F2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Cathedral_F2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Cathedral_F3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Cathedral_F3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Cathedral_F3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Cathedral_F4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Cathedral_F4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Cathedral_F4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_RoyalChamber"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_RoyalChamber"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_RoyalChamber"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_QuestItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_QuestItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_QuestItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GemItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GemItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GemItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_MaterialItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_MaterialItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_MaterialItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GoldPlus"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GoldPlus"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GoldPlus"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GoldMinus"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GoldMinus"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GoldMinus"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_NormalItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_NormalItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_NormalItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_MagicItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_MagicItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_MagicItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_UniqueItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_UniqueItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_UniqueItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_LegendItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_LegendItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_LegendItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_SetItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_SetItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_SetItem"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Detail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Detail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Detail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_LevelUp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_LevelUp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_LevelUp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_CheatKey"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_CheatKey"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_CheatKey"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Button0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Button0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Button0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Confirm2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Confirm2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Confirm2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Cancel2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Cancel2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Cancel2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Left1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Left1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Left1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Right1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Right1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Right1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Confirm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Confirm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Confirm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Destroy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Destroy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Destroy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_X"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_X"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_X"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Access"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Access"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Access"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GameContinue"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GameContinue"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GameContinue"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_CharacterChange"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_CharacterChange"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_CharacterChange"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_CharacterCreate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_CharacterCreate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_CharacterCreate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_CharacterSelect"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_CharacterSelect"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_CharacterSelect"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Cancel"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Cancel"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Cancel"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_BarbarianJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_BarbarianJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_BarbarianJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DemonHunterJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DemonHunterJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DemonHunterJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_MonkJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_MonkJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_MonkJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WitchDoctorJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WitchDoctorJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WitchDoctorJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WizardJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WizardJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WizardJob"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Back"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Back"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Back"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Create"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Create"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Create"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Male"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Male"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Male"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Female"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Female"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Female"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_BarbarianMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_BarbarianMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_BarbarianMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_BarbarianFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_BarbarianFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_BarbarianFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DemonHunterMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DemonHunterMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DemonHunterMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DemonHunterFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DemonHunterFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DemonHunterFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_MonkMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_MonkMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_MonkMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_MonkFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_MonkFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_MonkFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WitchDoctorMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WitchDoctorMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WitchDoctorMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WitchDoctorFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WitchDoctorFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WitchDoctorFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WizardMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WizardMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WizardMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WizardFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WizardFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WizardFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Up"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Up"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Up"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Down"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Down"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Down"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_CharacterDelete"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_CharacterDelete"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_CharacterDelete"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Advice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Advice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Advice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Producer"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Producer"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Producer"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Setting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Setting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Setting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_SkillWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_SkillWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_SkillWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_InvenWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_InvenWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_InvenWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_QuestWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_QuestWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_QuestWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_AchieveWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_AchieveWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_AchieveWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_SettingWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_SettingWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_SettingWindow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Storage0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Storage0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Storage0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Storage1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Storage1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Storage1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Storage2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Storage2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Storage2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Storage3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Storage3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Storage3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Storage4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Storage4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Storage4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WeaponStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WeaponStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WeaponStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_ArmorStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_ArmorStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_ArmorStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_AccessoryStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_AccessoryStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_AccessoryStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_PuzzleStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_PuzzleStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_PuzzleStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_RepurchaseStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_RepurchaseStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_RepurchaseStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Left"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Left"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Left"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Right"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Right"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Right"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_WeaponFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_WeaponFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_WeaponFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_ArmorFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_ArmorFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_ArmorFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DecompositionFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DecompositionFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DecompositionFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Decompose"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Decompose"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Decompose"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DecomposeNormal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DecomposeNormal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DecomposeNormal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DecomposeMagic"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DecomposeMagic"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DecomposeMagic"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DecomposeUnique"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DecomposeUnique"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DecomposeUnique"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_OpenCategory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_OpenCategory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_OpenCategory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_CloseCategory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_CloseCategory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_CloseCategory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Formula"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Formula"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Formula"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_ItemMake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_ItemMake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_ItemMake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GemFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GemFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GemFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_AccessoryFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_AccessoryFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_AccessoryFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_DisenchantStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_DisenchantStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_DisenchantStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Disenchant"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Disenchant"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Disenchant"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GraphicSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GraphicSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GraphicSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_SoundSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_SoundSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_SoundSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GameSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GameSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GameSetting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_None"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_None"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_None"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_Using"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_Using"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_Using"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_RadialBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_RadialBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_RadialBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_GaussianBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_GaussianBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_GaussianBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_MotionBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_MotionBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_MotionBlur"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_NormalShadow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_NormalShadow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_NormalShadow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_CascadeShadow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_CascadeShadow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_CascadeShadow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_ExponentFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_ExponentFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_ExponentFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_ExponentSquareFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_ExponentSquareFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_ExponentSquareFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_HeightFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_HeightFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_HeightFog"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Back_List"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Over_List"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Button_Down_List"));

	// RemoveBuffer - Base
	CBufferMgr::GetInstance()->Initialize();
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Trail"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Rect"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Screen"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Cube"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Energy"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Particle"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("AlphaBox"));

	// RemoveTexture - Effect
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Hit"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Dust10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Destory_Bomb31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Fire_Diff"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Fire_Noise"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Fire_Alpha"));
	
	// RemoveBuffer - Water
	CBufferMgr::GetInstance()->RemoveBuffer(_T("E09_S16_Water"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("E10_S14_Water"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Old_E03_S04_Water"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Old_E03_S03_Water"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Old_E03_S02_Water"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Old_E03_S01_Water"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Old_E03_N01_Water"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Skeletal_Throne_Water"));
}

// ForTitleScene
void CLoadMgr::LoadForTitleScene()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - Back
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Back/TitleScene.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Back_TitleScene"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Back/LoginScene.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Back_LoginScene"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Back/LobbyScene.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Back_LobbyScene"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Back/SelectScene.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Back_SelectScene"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Back/CreateScene.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Back_CreateScene"), pTexture);

	// AddTexture - Message
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Advice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Advice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/CharacterEmpty.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_CharacterEmpty"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/CharacterFull.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_CharacterFull"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/IDEmpty.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_IDEmpty"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/NameEmpty.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_NameEmpty"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Producer.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Producer"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/PWEmpty.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_PWEmpty"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/PWError.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_PWError"), pTexture);

	// AddTexture - TextField
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Back_ID.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Back_ID"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Over_ID.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Over_ID"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Back_PW.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Back_PW"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Over_PW.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Over_PW"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Back_Name.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Back_Name"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Over_Name.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Over_Name"), pTexture);

	// AddTexture - Badge
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/BarbarianMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_BarbarianMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/BarbarianFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_BarbarianFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/DemonHunterMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_DemonHunterMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/DemonHunterFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_DemonHunterFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/MonkMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_MonkMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/MonkFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_MonkFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/WitchDoctorMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_WitchDoctorMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/WitchDoctorFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_WitchDoctorFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/WizardMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_WizardMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Badge/WizardFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Badge_WizardFemale"), pTexture);

	// AddTexture - Profile
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Profile/Barbarian.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Profile_Barbarian"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Profile/DemonHunter.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Profile_DemonHunter"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Profile/Monk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Profile_Monk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Profile/WitchDoctor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Profile_WitchDoctor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Profile/Wizard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Profile_Wizard"), pTexture);
}
void CLoadMgr::UnloadForTitleScene()
{
	// RemoveTexture - Back
	CTextureMgr::GetInstance()->RemoveTexture(_T("Back_TitleScene"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Back_LoginScene"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Back_LobbyScene"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Back_SelectScene"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Back_CreateScene"));

	// RemoveTexture - Message
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Advice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_CharacterEmpty"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_CharacterFull"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_IDEmpty"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_NameEmpty"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Producer"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_PWEmpty"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_PWError"));

	// RemoveTexture - TextField
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Back_ID"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Over_ID"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Back_PW"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Over_PW"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Back_Name"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Over_Name"));

	// RemoveTexture - Badge
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_BarbarianMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_BarbarianFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_DemonHunterMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_DemonHunterFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_MonkMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_MonkFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_WitchDoctorMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_WitchDoctorFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_WizardMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Badge_WizardFemale"));

	// RemoveTexture - Profile
	CTextureMgr::GetInstance()->RemoveTexture(_T("Profile_Barbarian"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Profile_DemonHunter"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Profile_Monk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Profile_WitchDoctor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Profile_Wizard"));
}

// ForLobbyScene
void CLoadMgr::LoadForLobbyScene()
{
	
	// AddBuffer - Base
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Upper.X")));

}
void CLoadMgr::UnloadForLobbyScene()
{
	// RemoveBuffer - Base
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Upper"));
}

// ForPlayScene
void CLoadMgr::LoadForPlayScene()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - Sign
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Store.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Store"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/ItemPannel.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_ItemPannel"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/DownArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_DownArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/WhiteBorder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_WhiteBorder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/YellowBorder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_YellowBorder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/RedBorder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_RedBorder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/MagicGrid.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_MagicGrid"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/UniqueGrid.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_UniqueGrid"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/LegendGrid.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_LegendGrid"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/SetGrid.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_SetGrid"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/StatMark.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_StatMark"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/AnuAndTathamet.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_AnuAndTathamet"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Auriel.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Auriel"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Azmodan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Azmodan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Baal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Baal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Belial.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Belial"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Diablo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Diablo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Duriek.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Duriek"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Imperius.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Imperius"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Itherael.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Itherael"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Malthael.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Malthael"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Mephisto.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Mephisto"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Tyrael.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Tyrael"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Mystic.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Mystic"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Guard1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Guard1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Guard2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Guard2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Tashun.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Tashun"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/HPBox.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_HPBox"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/Enchantress.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_Enchantress"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/BarbarianMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_BarbarianMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/BarbarianFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_BarbarianFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/DemonHunterMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_DemonHunterMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/DemonHunterFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_DemonHunterFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/MonkMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_MonkMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/MonkFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_MonkFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/WitchDoctorMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_WitchDoctorMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/WitchDoctorFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_WitchDoctorFemale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/WizardMale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_WizardMale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Sign/WizardFemale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Sign_WizardFemale"), pTexture);

	// AddTexture - Window
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Slot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Slot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Skill.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Skill"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Storage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Storage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Store.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Store"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WeaponFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WeaponFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/ArmorFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_ArmorFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DecompositionFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DecompositionFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/GemFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_GemFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/AccessoryFactory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_AccessoryFactory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DisenchantStore.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DisenchantStore"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/QuestPage0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_QuestPage0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/QuestPage1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_QuestPage1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/AchievePage0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_AchievePage0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/AchievePage1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_AchievePage1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Detail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Detail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/EnchantressInven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_EnchantressInven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/GateWay.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_GateWay"), pTexture);

	// AddTexture - TextField
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Back_Amount.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Back_Amount"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/TextField/Over_Amount.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("TextField_Over_Amount"), pTexture);

	// AddTexture - Energy
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Exp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Exp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/HPBar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_HPBar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Cooldown.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Cooldown"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life00.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life00"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life01.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life01"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life02.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life02"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life03.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life03"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life04.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life04"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life05.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life05"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life06.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life06"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life07.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life07"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life08.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life08"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life09.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life09"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Life59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Life59"), pTexture);

	// AddTexture - Message
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Scene.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Scene"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Alpha.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Alpha"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Equip.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Equip"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemGrid.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemGrid"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemInfo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemInfo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemNameNormal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemNameNormal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemNameMagic.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemNameMagic"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemNameUnique.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemNameUnique"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemNameLegend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemNameLegend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemNameSet.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemNameSet"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemValue.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemValue"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ItemPannel.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ItemPannel"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/QuestBox.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_QuestBox"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/QuestAlarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_QuestAlarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/LevelUpAlarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_LevelUpAlarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Interface.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Interface"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Name.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Name"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/FollowerMenu.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_FollowerMenu"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/PlayerMenu.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_PlayerMenu"), pTexture);

	// AddTexture - Item - Gold
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gold/Gold.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gold"), pTexture);

	// AddTexture - Item - Puzzle
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Accessory.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Accessory"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Belt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Belt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Boots.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Boots"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Bracers.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Bracers"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/ChestArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_ChestArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Gloves.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Gloves"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Helm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Helm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Pants.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Pants"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Shoulder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Shoulder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Puzzle/Weapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Puzzle_Weapon"), pTexture);

	// AddTexture - Item - Amulet
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Amulet/33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Amulet_33"), pTexture);

	// AddTexture - Item - ArmorDyes
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ArmorDyes/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ArmorDyes_24"), pTexture);

	// AddTexture - Item - Axes
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Axes/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Axes_14"), pTexture);

	// AddTexture - Item - BarbarianBoots
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianBoots/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianBoots_17"), pTexture);

	// AddTexture - Item - BarbarianGloves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianGloves/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianGloves_17"), pTexture);

	// AddTexture - Item - BarbarianHelms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianHelms/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianHelms_16"), pTexture);

	// AddTexture - Item - BarbarianPants
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianPants/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianPants_17"), pTexture);

	// AddTexture - Item - BarbarianShoulders
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/BarbarianShoulders/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_BarbarianShoulders_16"), pTexture);

	// AddTexture - Item - Belts
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Belts/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Belts_30"), pTexture);

	// AddTexture - Item - Boots
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Boots/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Boots_22"), pTexture);

	// AddTexture - Item - Bows
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bows/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bows_14"), pTexture);

	// AddTexture - Item - Bracers
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Bracers/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Bracers_27"), pTexture);

	// AddTexture - Item - CeremonialDaggers
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CeremonialDaggers/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CeremonialDaggers_12"), pTexture);

	// AddTexture - Item - ChestArmor
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/ChestArmor/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_ChestArmor_8"), pTexture);

	// AddTexture - Item - CombatStaves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/CombatStaves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_CombatStaves_13"), pTexture);

	// AddTexture - Item - Crossbows
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Crossbows/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Crossbows_15"), pTexture);

	// AddTexture - Item - Daggers
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Daggers/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Daggers_14"), pTexture);

	// AddTexture - Item - DemonHunterBoots
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterBoots/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterBoots_19"), pTexture);

	// AddTexture - Item - DemonHunterChestArmor
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterChestArmor/42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterChestArmor_42"), pTexture);

	// AddTexture - Item - DemonHunterGloves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterGloves/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterGloves_17"), pTexture);

	// AddTexture - Item - DemonHunterHelms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterHelms/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterHelms_16"), pTexture);

	// AddTexture - Item - DemonHunterPants
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterPants/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterPants_17"), pTexture);

	// AddTexture - Item - DemonHunterShoulders
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/DemonHunterShoulders/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_DemonHunterShoulders_16"), pTexture);

	// AddTexture - Item - FistWeapons
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/FistWeapons/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_FistWeapons_18"), pTexture);

	// AddTexture - Item - Gems
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Gems/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Gems_30"), pTexture);

	// AddTexture - Item - HandXBows
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/HandXBows/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_HandXBows_17"), pTexture);

	// AddTexture - Item - Maces
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Maces/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Maces_18"), pTexture);

	// AddTexture - Item - MightyWeapon1H
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon1H/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon1H_13"), pTexture);

	// AddTexture - Item - MightyWeapon2H
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MightyWeapon2H/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MightyWeapon2H_10"), pTexture);

	// AddTexture - Item - MonkBelts
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBelts/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBelts_17"), pTexture);

	// AddTexture - Item - MonkBoots
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkBoots/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkBoots_17"), pTexture);

	// AddTexture - Item - MonkChestArmor
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkChestArmor/34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkChestArmor_34"), pTexture);

	// AddTexture - Item - MonkGloves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkGloves/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkGloves_17"), pTexture);

	// AddTexture - Item - MonkHelms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkHelms/34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkHelms_34"), pTexture);

	// AddTexture - Item - MonkPants
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkPants/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkPants_25"), pTexture);

	// AddTexture - Item - MonkShoulders
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/MonkShoulders/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_MonkShoulders_17"), pTexture);

	// AddTexture - Item - Pants
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Pants/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Pants_16"), pTexture);

	// AddTexture - Item - Polearms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Polearms/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Polearms_12"), pTexture);

	// AddTexture - Item - Quest
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quest/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quest_11"), pTexture);

	// AddTexture - Item - Quivers
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Quivers/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Quivers_15"), pTexture);

	// AddTexture - Item - Orbs
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Orbs/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Orbs_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Orbs/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Orbs_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Orbs/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Orbs_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Orbs/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Orbs_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Orbs/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Orbs_5"), pTexture);

	// AddTexture - Item - Materials
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Materials/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Materials_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Materials/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Materials_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Materials/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Materials_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Materials/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Materials_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Materials/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Materials_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Materials/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Materials_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Materials/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Materials_7"), pTexture);

	// AddTexture - Item - Rings
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Rings/42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Rings_42"), pTexture);

	// AddTexture - Item - SetHelms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/SetHelms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_SetHelms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/SetHelms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_SetHelms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/SetHelms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_SetHelms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/SetHelms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_SetHelms_4"), pTexture);

	// AddTexture - Item - SetShoulders
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/SetShoulders/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_SetShoulders_1"), pTexture);

	// AddTexture - Item - Shields
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Shields/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Shields_16"), pTexture);

	// AddTexture - Item - Sockets
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Sockets/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Sockets_1"), pTexture);

	// AddTexture - Item - Spears
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Spears/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Spears_9"), pTexture);

	// AddTexture - Item - Staves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Staves/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Staves_14"), pTexture);

	// AddTexture - Item - Swords
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Swords/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Swords_20"), pTexture);

	// AddTexture - Item - TwoHandedAxes
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedAxes/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedAxes_12"), pTexture);

	// AddTexture - Item - TwoHandedMaces
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedMaces/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedMaces_12"), pTexture);

	// AddTexture - Item - TwoHandedSwords
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/TwoHandedSwords/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_TwoHandedSwords_17"), pTexture);

	// AddTexture - Item - UniqueChestArmor
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueChestArmor/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueChestArmor_15"), pTexture);

	// AddTexture - Item - UniqueGloves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueGloves/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueGloves_20"), pTexture);

	// AddTexture - Item - UniqueHelms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueHelms/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueHelms_10"), pTexture);

	// AddTexture - Item - UniqueShoulders
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueShoulders/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueShoulders_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueShoulders/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueShoulders_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueShoulders/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueShoulders_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueShoulders/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueShoulders_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueShoulders/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueShoulders_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueShoulders/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueShoulders_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/UniqueShoulders/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_UniqueShoulders_7"), pTexture);

	// AddTexture - Item - Wands
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Wands/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Wands_15"), pTexture);

	// AddTexture - Item - WitchDoctorBelts
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBelts/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBelts_16"), pTexture);

	// AddTexture - Item - WitchDoctorBoots
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorBoots/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorBoots_16"), pTexture);

	// AddTexture - Item - WitchDoctorChestArmor
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorChestArmor/31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorChestArmor_31"), pTexture);

	// AddTexture - Item - WitchDoctorGloves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorGloves/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorGloves_17"), pTexture);

	// AddTexture - Item - WitchDoctorHelms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorHelms/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorHelms_26"), pTexture);

	// AddTexture - Item - Mojo
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/Mojo/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_Mojo_12"), pTexture);

	// AddTexture - Item - WitchDoctorPants
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorPants/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorPants_17"), pTexture);

	// AddTexture - Item - WitchDoctorShoulders
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WitchDoctorShoulders/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WitchDoctorShoulders_16"), pTexture);

	// AddTexture - Item - WizardBelts
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBelts/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBelts_17"), pTexture);

	// AddTexture - Item - WizardBoots
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardBoots/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardBoots_17"), pTexture);

	// AddTexture - Item - WizardChestArmor
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardChestArmor/31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardChestArmor_31"), pTexture);

	// AddTexture - Item - WizardGloves
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardGloves/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardGloves_17"), pTexture);

	// AddTexture - Item - WizardHats
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHats/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHats_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHats/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHats_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHats/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHats_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHats/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHats_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHats/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHats_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHats/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHats_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHats/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHats_7"), pTexture);

	// AddTexture - Item - WizardHelms
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardHelms/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardHelms_17"), pTexture);

	// AddTexture - Item - WizardPants
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardPants/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardPants_17"), pTexture);

	// AddTexture - Item - WizardShoulders
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Item/WizardShoulders/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Item_WizardShoulders_17"), pTexture);

	// AddTexture - Effect
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MousePick/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MousePick_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/LevelUp/22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LevelUp_22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/BloodDecal/8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BloodDecal_8"), pTexture);

	// AddBuffer - Item - Axe
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Axe_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Axe/"), _T("Unique_4.X")));

	// AddBuffer - Item - Bow
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Bow_Unique6"), new CStaticMesh(_T("../Resource/Mesh/Item/Bow/"), _T("Unique_6.X")));

	// AddBuffer - Item - CeremonialDagger
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CeremonialDagger_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/CeremonialDagger/"), _T("Unique_4.X")));

	// AddBuffer - Item - CrossBow
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Base7"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Base_7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_CrossBow_Unique6"), new CStaticMesh(_T("../Resource/Mesh/Item/CrossBow/"), _T("Unique_6.X")));

	// AddBuffer - Item - Fist
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique6"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique7"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Unique8"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Unique_8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Fist_Set0"), new CStaticMesh(_T("../Resource/Mesh/Item/Fist/"), _T("Set_0.X")));

	// AddBuffer - Item - HandXBow
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Base7"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Base_7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_HandXBow_Set0"), new CStaticMesh(_T("../Resource/Mesh/Item/HandXBow/"), _T("Set_0.X")));

	// AddBuffer - Item - Mace
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique6"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mace_Unique7"), new CStaticMesh(_T("../Resource/Mesh/Item/Mace/"), _T("Unique_7.X")));

	// AddBuffer - Item - Mighty1H
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty1H_Set0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty1H/"), _T("Set_0.X")));

	// AddBuffer - Item - Mighty2H
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mighty2H_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Mighty2H/"), _T("Unique_3.X")));

	// AddBuffer - Item - Mojo
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Mojo_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/Mojo/"), _T("Unique_5.X")));

	// AddBuffer - Item - Orb
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Orb_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Orb/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Orb_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Orb/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Orb_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Orb/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Orb_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Orb/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Orb_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Orb/"), _T("Unique_1.X")));

	// AddBuffer - Item - Polearm
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Base7"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Base_7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Polearm_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Polearm/"), _T("Unique_2.X")));

	// AddBuffer - Item - Shield
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Shield_Set0"), new CStaticMesh(_T("../Resource/Mesh/Item/Shield/"), _T("Set_0.X")));

	// AddBuffer - Item - Spear
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Spear_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Spear/"), _T("Unique_2.X")));

	// AddBuffer - Item - Staff
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Staff_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Staff/"), _T("Unique_3.X")));

	// AddBuffer - Item - Sword
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Base7"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Base_7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique6"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique7"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique8"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Unique9"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Unique_9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Sword_Set0"), new CStaticMesh(_T("../Resource/Mesh/Item/Sword/"), _T("Set_0.X")));

	// AddBuffer - Item - Two_Handed_Axe
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Axe_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Axe/"), _T("Unique_4.X")));

	// AddBuffer - Item - Two_Handed_Mace
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Mace_Unique6"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Mace/"), _T("Unique_6.X")));

	// AddBuffer - Item - Two_Handed_Sword
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique2"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique3"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique4"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique5"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique6"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Two_Handed_Sword_Unique7"), new CStaticMesh(_T("../Resource/Mesh/Item/Two_Handed_Sword/"), _T("Unique_7.X")));

	// AddBuffer - Item - Wand
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Base0"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Base_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Base1"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Base_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Base2"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Base_2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Base3"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Base_3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Base4"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Base_4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Base5"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Base_5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Base6"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Base_6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Unique0"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Unique_0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Unique1"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Unique_1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_Wand_Set0"), new CStaticMesh(_T("../Resource/Mesh/Item/Wand/"), _T("Set_0.X")));

	// AddBuffer - Follower
	CBufferMgr::GetInstance()->AddBuffer(_T("Enchantress_Base"), new CDynamicMesh(_T("../Resource/Mesh/Follower/Enchantress/Base/"), _T("Base.X")));
}
void CLoadMgr::UnloadForPlayScene()
{
	// RemoveTexture - Sign
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Store"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_ItemPannel"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_DownArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_WhiteBorder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_YellowBorder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_RedBorder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_MagicGrid"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_UniqueGrid"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_LegendGrid"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_SetGrid"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_StatMark"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_AnuAndTathamet"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Auriel"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Azmodan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Baal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Belial"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Diablo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Duriek"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Imperius"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Itherael"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Malthael"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Mephisto"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Tyrael"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Mystic"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Guard1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Guard2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Tashun"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_HPBox"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_Enchantress"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_BarbarianMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_BarbarianFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_DemonHunterMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_DemonHunterFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_MonkMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_MonkFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_WitchDoctorMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_WitchDoctorFemale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_WizardMale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Sign_WizardFemale"));

	// RemoveTexture - Window
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Slot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Skill"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Storage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Store"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WeaponFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_ArmorFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DecompositionFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_GemFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_AccessoryFactory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DisenchantStore"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_QuestPage0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_QuestPage1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_AchievePage0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_AchievePage1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Detail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_EnchantressInven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_GateWay"));

	// RemoveTexture - TextField
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Back_Amount"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("TextField_Over_Amount"));

	// RemoveTexture - Energy
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Exp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_HPBar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Cooldown"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life00"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life01"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life02"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life03"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life04"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life05"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life06"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life07"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life08"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life09"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Life59"));

	// RemoveTexture - Message
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Scene"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Alpha"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Equip"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemGrid"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemInfo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemNameNormal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemNameMagic"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemNameUnique"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemNameLegend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemNameSet"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemValue"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ItemPannel"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_QuestBox"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_QuestAlarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_LevelUpAlarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Interface"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Name"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_FollowerMenu"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_PlayerMenu"));

	// RemoveTexture - Item - Puzzle
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gold"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Accessory"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Belt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Boots"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Bracers"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_ChestArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Gloves"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Helm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Pants"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Shoulder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Puzzle_Weapon"));

	// RemoveTexture - Item - Amulet
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Amulet_33"));

	// RemoveTexture - Item - ArmorDyes
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ArmorDyes_24"));

	// RemoveTexture - Item - Axes
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Axes_14"));

	// RemoveTexture - Item - BarbarianBoots
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianBoots_17"));

	// RemoveTexture - Item - BarbarianGloves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianGloves_17"));

	// RemoveTexture - Item - BarbarianHelms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianHelms_16"));

	// RemoveTexture - Item - BarbarianPants
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianPants_17"));

	// RemoveTexture - Item - BarbarianShoulders
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_BarbarianShoulders_16"));

	// RemoveTexture - Item - Belts
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Belts_30"));

	// RemoveTexture - Item - Boots
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Boots_22"));

	// RemoveTexture - Item - Bows
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bows_14"));

	// RemoveTexture - Item - Bracers
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Bracers_27"));

	// RemoveTexture - Item - CeremonialDaggers
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CeremonialDaggers_12"));

	// RemoveTexture - Item - ChestArmor
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_ChestArmor_8"));

	// RemoveTexture - Item - CombatStaves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_CombatStaves_13"));

	// RemoveTexture - Item - Crossbows
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Crossbows_15"));

	// RemoveTexture - Item - Daggers
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Daggers_14"));

	// RemoveTexture - Item - DemonHunterBoots
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterBoots_19"));

	// RemoveTexture - Item - DemonHunterChestArmor
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterChestArmor_42"));

	// RemoveTexture - Item - DemonHunterGloves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterGloves_17"));

	// RemoveTexture - Item - DemonHunterHelms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterHelms_16"));

	// RemoveTexture - Item - DemonHunterPants
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterPants_17"));

	// RemoveTexture - Item - DemonHunterShoulders
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_DemonHunterShoulders_16"));

	// RemoveTexture - Item - FistWeapons
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_FistWeapons_18"));

	// RemoveTexture - Item - Gems
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Gems_30"));

	// RemoveTexture - Item - HandXBows
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_HandXBows_17"));

	// RemoveTexture - Item - Maces
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Maces_18"));

	// RemoveTexture - Item - MightyWeapon1H
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon1H_13"));

	// RemoveTexture - Item - MightyWeapon2H
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MightyWeapon2H_10"));

	// RemoveTexture - Item - MonkBelts
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBelts_17"));

	// RemoveTexture - Item - MonkBoots
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkBoots_17"));

	// RemoveTexture - Item - MonkChestArmor
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkChestArmor_34"));

	// RemoveTexture - Item - MonkGloves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkGloves_17"));

	// RemoveTexture - Item - MonkHelms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkHelms_34"));

	// RemoveTexture - Item - MonkPants
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkPants_25"));

	// RemoveTexture - Item - MonkShoulders
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_MonkShoulders_17"));

	// RemoveTexture - Item - Pants
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Pants_16"));

	// RemoveTexture - Item - Polearms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Polearms_12"));

	// RemoveTexture - Item - Quest
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quest_11"));

	// RemoveTexture - Item - Quivers
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Quivers_15"));

	// RemoveTexture - Item - Orbs
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Orbs_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Orbs_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Orbs_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Orbs_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Orbs_5"));

	// RemoveTexture - Item - Materials
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Materials_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Materials_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Materials_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Materials_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Materials_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Materials_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Materials_7"));

	// RemoveTexture - Item - Rings
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Rings_42"));

	// RemoveTexture - Item - SetHelms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_SetHelms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_SetHelms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_SetHelms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_SetHelms_4"));

	// RemoveTexture - Item - SetShoulders
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_SetShoulders_1"));

	// RemoveTexture - Item - Shields
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Shields_16"));

	// RemoveTexture - Item - Sockets
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Sockets_1"));

	// RemoveTexture - Item - Spears
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Spears_9"));

	// RemoveTexture - Item - Staves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Staves_14"));

	// RemoveTexture - Item - Swords
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Swords_20"));

	// RemoveTexture - Item - TwoHandedAxes
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedAxes_12"));

	// RemoveTexture - Item - TwoHandedMaces
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedMaces_12"));

	// RemoveTexture - Item - TwoHandedSwords
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_TwoHandedSwords_17"));

	// RemoveTexture - Item - UniqueChestArmor
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueChestArmor_15"));

	// RemoveTexture - Item - UniqueGloves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueGloves_20"));

	// RemoveTexture - Item - UniqueHelms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueHelms_10"));

	// RemoveTexture - Item - UniqueShoulders
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueShoulders_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueShoulders_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueShoulders_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueShoulders_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueShoulders_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueShoulders_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_UniqueShoulders_7"));

	// RemoveTexture - Item - Wands
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Wands_15"));

	// RemoveTexture - Item - WitchDoctorBelts
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBelts_16"));

	// RemoveTexture - Item - WitchDoctorBoots
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorBoots_16"));

	// RemoveTexture - Item - WitchDoctorChestArmor
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorChestArmor_31"));

	// RemoveTexture - Item - WitchDoctorGloves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorGloves_17"));

	// RemoveTexture - Item - WitchDoctorHelms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorHelms_26"));

	// RemoveTexture - Item - Mojo
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_Mojo_12"));

	// RemoveTexture - Item - WitchDoctorPants
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorPants_17"));

	// RemoveTexture - Item - WitchDoctorShoulders
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WitchDoctorShoulders_16"));

	// RemoveTexture - Item - WizardBelts
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBelts_17"));

	// RemoveTexture - Item - WizardBoots
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardBoots_17"));

	// RemoveTexture - Item - WizardChestArmor
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardChestArmor_31"));

	// RemoveTexture - Item - WizardGloves
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardGloves_17"));

	// RemoveTexture - Item - WizardHats
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHats_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHats_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHats_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHats_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHats_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHats_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHats_7"));

	// RemoveTexture - Item - WizardHelms
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardHelms_17"));

	// RemoveTexture - Item - WizardPants
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardPants_17"));

	// RemoveTexture - Item - WizardShoulders
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Item_WizardShoulders_17"));

	// RemoveTexture - Effect
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_1")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_2")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_3")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_4")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_5")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_6")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_7")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BloodDecal_8")); 
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MousePick_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LevelUp_22"));

	// RemoveBuffer - Item - Axe
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Axe_Unique4"));

	// RemoveBuffer - Item - Bow
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Bow_Unique6"));

	// RemoveBuffer - Item - CeremonialDagger
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CeremonialDagger_Unique4"));

	// RemoveBuffer - Item - CrossBow
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Base7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_CrossBow_Unique6"));

	// RemoveBuffer - Item - Fist
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Unique8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Fist_Set0"));

	// RemoveBuffer - Item - HandXBow
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Base7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_HandXBow_Set0"));

	// RemoveBuffer - Item - Mace
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mace_Unique7"));

	// RemoveBuffer - Item - Mighty1H
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty1H_Set0"));

	// RemoveBuffer - Item - Mighty2H
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mighty2H_Unique3"));

	// RemoveBuffer - Item - Mojo
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Mojo_Unique5"));

	// RemoveBuffer - Item - Orb
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Orb_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Orb_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Orb_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Orb_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Orb_Unique1"));

	// RemoveBuffer - Item - Polearm
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Base7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Polearm_Unique2"));

	// RemoveBuffer - Item - Shield
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Shield_Set0"));

	// RemoveBuffer - Item - Spear
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Spear_Unique2"));

	// RemoveBuffer - Item - Staff
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Staff_Unique3"));

	// RemoveBuffer - Item - Sword
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Base7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Unique9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Sword_Set0"));

	// RemoveBuffer - Item - Two_Handed_Axe
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Axe_Unique4"));

	// RemoveBuffer - Item - Two_Handed_Mace
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Mace_Unique6"));

	// RemoveBuffer - Item - Two_Handed_Sword
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Two_Handed_Sword_Unique7"));

	// RemoveBuffer - Item - Wand
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Base0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Base1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Base2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Base3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Base4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Base5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Base6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Unique0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Unique1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_Wand_Set0"));

	// RemoveBuffer - Follower
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Enchantress_Base"));
}

// ForBarbarianMale
void CLoadMgr::LoadForBarbarianMale()
{
	// LoadForBarbarian
	LoadForBarbarian();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/BarbarianMale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_BarbarianMale_Inven"), pTexture);

	// AddBuffer - BarbarianMale
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_HVY_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/HVY/"), _T("HVY_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_HVY_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/HVY/"), _T("HVY_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_HVY_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/HVY/"), _T("HVY_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_HVY_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/HVY/"), _T("HVY_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_LIT_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/LIT/"), _T("LIT_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_LIT_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/LIT/"), _T("LIT_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_LIT_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/LIT/"), _T("LIT_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_LIT_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/LIT/"), _T("LIT_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_MED_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/MED/"), _T("MED_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_MED_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/MED/"), _T("MED_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_MED_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/MED/"), _T("MED_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Male_MED_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Male/MED/"), _T("MED_Upper.X")));
}
void CLoadMgr::UnloadForBarbarianMale()
{
	// UnloadForBarbarian
	UnloadForBarbarian();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_BarbarianMale_Inven"));

	// RemoveBuffer - BarbarianMale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Hair")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_HVY_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_HVY_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_HVY_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_HVY_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_LIT_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_LIT_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_LIT_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_LIT_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_MED_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_MED_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_MED_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Male_MED_Upper"));
}

// ForBarbarianFemale
void CLoadMgr::LoadForBarbarianFemale()
{
	// LoadForBarbarian
	LoadForBarbarian();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/BarbarianFemale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_BarbarianFemale_Inven"), pTexture);

	// AddBuffer - BarbarianFemale
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Barbarian_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Barbarian_Female/Base/"), _T("Base_Upper.X")));
}
void CLoadMgr::UnloadForBarbarianFemale()
{
	// UnloadForBarbarian
	UnloadForBarbarian();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_BarbarianFemale_Inven"));

	// RemoveBuffer - BarbarianFemale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Barbarian_Female_Base_Upper"));
}

// ForDemonHunterMale
void CLoadMgr::LoadForDemonHunterMale()
{
	// LoadForDemonHunter
	LoadForDemonHunter();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunterMale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunterMale_Inven"), pTexture);

	// AddBuffer - DemonHunterMale
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Male/Base/"), _T("Base_Upper.X")));
}
void CLoadMgr::UnloadForDemonHunterMale()
{
	// UnloadForDemonHunter
	UnloadForDemonHunter();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunterMale_Inven"));

	// RemoveBuffer - DemonHunterMale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Male_Base_Upper"));
}

// ForDemonHunterFemale
void CLoadMgr::LoadForDemonHunterFemale()
{
	// LoadForDemonHunter
	LoadForDemonHunter();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunterFemale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunterFemale_Inven"), pTexture);

	// AddBuffer - DemonHunterFemale
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_CLS_HVY_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/CLS/"), _T("CLS_HVY_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_CLS_LIT_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/CLS/"), _T("CLS_LIT_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_CLS_MED_Upper_A"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/CLS/"), _T("CLS_MED_Upper_A.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_CLS_MED_Upper_B"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/CLS/"), _T("CLS_MED_Upper_B.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_HVY_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/HVY/"), _T("HVY_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_HVY_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/HVY/"), _T("HVY_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_HVY_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/HVY/"), _T("HVY_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_HVY_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/HVY/"), _T("HVY_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_LIT_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/LIT/"), _T("LIT_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_LIT_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/LIT/"), _T("LIT_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_LIT_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/LIT/"), _T("LIT_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_LIT_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/LIT/"), _T("LIT_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_MED_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/MED/"), _T("MED_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_MED_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/MED/"), _T("MED_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_MED_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/MED/"), _T("MED_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("DemonHunter_Female_MED_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/DemonHunter_Female/MED/"), _T("MED_Upper.X")));
}
void CLoadMgr::UnloadForDemonHunterFemale()
{
	// UnloadForDemonHunter
	UnloadForDemonHunter();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunterFemale_Inven"));

	// RemoveBuffer - DemonHunterFemale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Hair")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_CLS_HVY_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_CLS_LIT_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_CLS_MED_Upper_A")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_CLS_MED_Upper_B")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_HVY_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_HVY_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_HVY_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_HVY_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_LIT_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_LIT_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_LIT_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_LIT_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_MED_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_MED_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_MED_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("DemonHunter_Female_MED_Upper")); 
}

// ForMonkMale
void CLoadMgr::LoadForMonkMale()
{
	// LoadForMonk
	LoadForMonk();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/MonkMale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_MonkMale_Inven"), pTexture);

	// AddBuffer - MonkMale
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_HVY_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/HVY/"), _T("HVY_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_HVY_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/HVY/"), _T("HVY_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_HVY_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/HVY/"), _T("HVY_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_HVY_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/HVY/"), _T("HVY_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_LIT_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/LIT/"), _T("LIT_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_LIT_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/LIT/"), _T("LIT_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_LIT_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/LIT/"), _T("LIT_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_LIT_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/LIT/"), _T("LIT_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_MED_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/MED/"), _T("MED_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_MED_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/MED/"), _T("MED_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_MED_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/MED/"), _T("MED_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Male_MED_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Male/MED/"), _T("MED_Upper.X")));
}
void CLoadMgr::UnloadForMonkMale()
{
	// UnloadForMonk
	UnloadForMonk();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_MonkMale_Inven"));

	// RemoveBuffer - MonkMale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_HVY_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_HVY_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_HVY_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_HVY_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_LIT_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_LIT_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_LIT_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_LIT_Upper")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_MED_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_MED_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_MED_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Male_MED_Upper"));
}

// ForMonkFemale
void CLoadMgr::LoadForMonkFemale()
{
	// LoadForMonk
	LoadForMonk();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/MonkFemale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_MonkFemale_Inven"), pTexture);

	// AddBuffer - MonkFemale
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Monk_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Monk_Female/Base/"), _T("Base_Upper.X")));
}
void CLoadMgr::UnloadForMonkFemale()
{
	// UnloadForMonk
	UnloadForMonk();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_MonkFemale_Inven"));

	// RemoveBuffer - MonkFemale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Monk_Female_Base_Upper"));
}

// ForWitchDoctorMale
void CLoadMgr::LoadForWitchDoctorMale()
{
	// LoadForWitchDoctor
	LoadForWitchDoctor();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctorMale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctorMale_Inven"), pTexture);

	// AddBuffer - WitchDoctorMale
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_HVY_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/HVY/"), _T("HVY_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_HVY_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/HVY/"), _T("HVY_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_HVY_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/HVY/"), _T("HVY_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_HVY_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/HVY/"), _T("HVY_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_LIT_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/LIT/"), _T("LIT_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_LIT_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/LIT/"), _T("LIT_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_LIT_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/LIT/"), _T("LIT_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_LIT_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/LIT/"), _T("LIT_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_MED_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/MED/"), _T("MED_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_MED_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/MED/"), _T("MED_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_MED_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/MED/"), _T("MED_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Male_MED_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Male/MED/"), _T("MED_Upper.X")));
}
void CLoadMgr::UnloadForWitchDoctorMale()
{
	// UnloadForWitchDoctor
	UnloadForWitchDoctor();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctorMale_Inven"));

	// RemoveBuffer - WitchDoctorMale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_HVY_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_HVY_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_HVY_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_HVY_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_LIT_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_LIT_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_LIT_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_LIT_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_MED_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_MED_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_MED_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Male_MED_Upper"));
}

// ForWitchDoctorFemale
void CLoadMgr::LoadForWitchDoctorFemale()
{
	// LoadForWitchDoctor
	LoadForWitchDoctor();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctorFemale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctorFemale_Inven"), pTexture);

	// AddBuffer - WitchDoctorFemale
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("WitchDoctor_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/WitchDoctor_Female/Base/"), _T("Base_Upper.X")));
}
void CLoadMgr::UnloadForWitchDoctorFemale()
{
	// UnloadForWitchDoctor
	UnloadForWitchDoctor();

	// RemoveTexture - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctorFemale_Inven"));

	// RemoveBuffer - WitchDoctorFemale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Boots")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Hands")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Pants")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("WitchDoctor_Female_Base_Upper"));
}

// ForWizardMale
void CLoadMgr::LoadForWizardMale()
{
	// LoadForWizard
	LoadForWizard();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WizardMale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WizardMale_Inven"), pTexture);

	// AddBuffer - WizardMale
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Male_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Male/Base/"), _T("Base_Upper.X")));
}
void CLoadMgr::UnloadForWizardMale()
{
	// UnloadForWizard
	UnloadForWizard();

	// RemoveBuffer - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WizardMale_Inven"));

	// RemoveBuffer - WizardMale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Male_Base_Upper"));
}

// ForWizardFemale
void CLoadMgr::LoadForWizardFemale()
{
	// LoadForWizard
	LoadForWizard();

	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - InvenWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WizardFemale_Inven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WizardFemale_Inven"), pTexture);

	// AddBuffer - WizardFemale
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Hair"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Hair.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_Base_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/Base/"), _T("Base_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_HVY_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/HVY/"), _T("HVY_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_HVY_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/HVY/"), _T("HVY_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_HVY_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/HVY/"), _T("HVY_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_HVY_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/HVY/"), _T("HVY_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_LIT_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/LIT/"), _T("LIT_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_LIT_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/LIT/"), _T("LIT_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_LIT_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/LIT/"), _T("LIT_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_LIT_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/LIT/"), _T("LIT_Upper.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_MED_Boots"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/MED/"), _T("MED_Boots.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_MED_Hands"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/MED/"), _T("MED_Hands.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_MED_Pants"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/MED/"), _T("MED_Pants.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Wizard_Female_MED_Upper"), new CDynamicMesh(_T("../Resource/Mesh/Player/Wizard_Female/MED/"), _T("MED_Upper.X")));
}
void CLoadMgr::UnloadForWizardFemale()
{
	// UnloadForWizard
	UnloadForWizard();

	// RemoveBuffer - InvenWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WizardFemale_Inven"));

	// RemoveBuffer - WizardFemale
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Hair"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_Base_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_HVY_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_HVY_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_HVY_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_HVY_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_LIT_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_LIT_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_LIT_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_LIT_Upper"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_MED_Boots"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_MED_Hands"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_MED_Pants"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Wizard_Female_MED_Upper"));
}

// ForBarbarian
void CLoadMgr::LoadForBarbarian()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - SkillWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Barbarian_Defensive.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Barbarian_Defensive"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Barbarian_Might.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Barbarian_Might"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Barbarian_Primary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Barbarian_Primary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Barbarian_Rage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Barbarian_Rage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Barbarian_Secondary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Barbarian_Secondary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Barbarian_Tactics.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Barbarian_Tactics"), pTexture);

	// AddTexture - Energy
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage00.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage00"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage01.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage01"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage02.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage02"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage03.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage03"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage04.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage04"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage05.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage05"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage06.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage06"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage07.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage07"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage08.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage08"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage09.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage09"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Rage59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Rage59"), pTexture);

	// AddTexture - Message
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_WrathOfTheBerserker"), pTexture);

	// AddTexture - Slot
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Back_WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Back_WrathOfTheBerserker"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Over_WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Over_WrathOfTheBerserker"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Down_WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Down_WrathOfTheBerserker"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Barbarian/Disable_WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Barbarian_Disable_WrathOfTheBerserker"), pTexture);

	// AddTexture - Barbarian
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_AncientSpear.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_AncientSpear"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Bash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Bash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_BattleRage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_BattleRage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_CallOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_CallOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Cleave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Cleave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Earthquake.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Earthquake"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Frenzy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Frenzy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_FuriousCharge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_FuriousCharge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_GroundStomp.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_GroundStomp"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_HammerOfTheAncients.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_HammerOfTheAncients"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_IgnorePain.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_IgnorePain"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Leap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Leap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Overpower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Overpower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Rend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Rend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Revenge.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Revenge"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_SeismicSlam.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_SeismicSlam"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Sprint.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Sprint"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_ThreateningShout.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_ThreateningShout"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_WarCry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_WarCry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_WeaponThrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_WeaponThrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_Whirlwind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_Whirlwind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Back_WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Back_WrathOfTheBerserker"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Over_WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Over_WrathOfTheBerserker"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Barbarian/Down_WrathOfTheBerserker.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Barbarian_Down_WrathOfTheBerserker"), pTexture);

	// AddBuffer - Item - BarbarianHelms
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_0"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_1"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_2"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_3"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_4"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_5"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_6"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_7"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_8"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_9"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_10"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_11"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_12"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_13"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_14"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_15"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_16"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_17"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_18"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_19"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_20"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_21"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_22"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_23"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_24"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_25"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_26"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_27"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_28"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_29"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_30"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianHelms_31"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianHelms/"), _T("31.X")));
	// AddBuffer - Item - BarbarianShoulders
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_0"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_1"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_2"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_3"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_4"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_5"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_6"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_7"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_8"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_9"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_10"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_11"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_12"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_13"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_14"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_15"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_16"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_17"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_18"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_19"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_20"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_21"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_22"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_23"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_24"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_25"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_26"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_27"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_28"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_29"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_30"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_BarbarianShoulders_31"), new CStaticMesh(_T("../Resource/Mesh/Item/BarbarianShoulders/"), _T("31.X")));

	// AddTexture - Effect

	// AddBuffer - Effect
}
void CLoadMgr::UnloadForBarbarian()
{
	// RemoveTexture - SkillWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Barbarian_Defensive"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Barbarian_Might"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Barbarian_Primary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Barbarian_Rage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Barbarian_Secondary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Barbarian_Tactics"));

	// RemoveTexture - Energy
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage00"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage01"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage02"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage03"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage04"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage05"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage06"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage07"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage08"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage09"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Rage59"));

	// RemoveTexture - Message
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_WrathOfTheBerserker"));

	// RemoveTexture - Slot
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Back_WrathOfTheBerserker"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Over_WrathOfTheBerserker"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Down_WrathOfTheBerserker"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Barbarian_Disable_WrathOfTheBerserker"));

	// RemoveTexture - Skill
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_AncientSpear"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Bash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_BattleRage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_CallOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Cleave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Earthquake"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Frenzy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_FuriousCharge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_GroundStomp"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_HammerOfTheAncients"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_IgnorePain"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Leap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Overpower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Rend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Revenge"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_SeismicSlam"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Sprint"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_ThreateningShout"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_WarCry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_WeaponThrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_Whirlwind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Back_WrathOfTheBerserker"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Over_WrathOfTheBerserker"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Barbarian_Down_WrathOfTheBerserker"));

	// RemoveBuffer - Item - BarbarianHelms
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_0")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_1")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_2")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_3")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_4")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_5")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_6")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_7")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_8")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_9")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianHelms_31"));

	// RemoveBuffer - Item - BarbarianShoulders
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_0")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_1")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_2")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_3")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_4")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_5")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_6")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_7")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_8")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_9")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_BarbarianShoulders_31"));

	// AddTexture - Effect

	// AddBuffer - Effect
}

// ForDemonHunter
void CLoadMgr::LoadForDemonHunter()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - SkillWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunter_Archery.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunter_Archery"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunter_Defensive.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunter_Defensive"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunter_Devices.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunter_Devices"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunter_Hunting.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunter_Hunting"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunter_Primary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunter_Primary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/DemonHunter_Secondary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_DemonHunter_Secondary"), pTexture);

	// AddTexture - Energy
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate00.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate00"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate01.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate01"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate02.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate02"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate03.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate03"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate04.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate04"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate05.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate05"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate06.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate06"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate07.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate07"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate08.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate08"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate09.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate09"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Hate59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Hate59"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control00.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control00"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control01.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control01"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control02.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control02"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control03.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control03"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control04.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control04"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control05.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control05"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control06.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control06"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control07.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control07"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control08.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control08"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control09.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control09"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Control59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Control59"), pTexture);

	// AddTexture - Message
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Vault"), pTexture);

	// AddTexture - Slot
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Back_Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Back_Vault"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Over_Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Over_Vault"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Down_Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Down_Vault"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/DemonHunter/Disable_Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_DemonHunter_Disable_Vault"), pTexture);

	// AddTexture - Skill
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Bola.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Bola"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Caltrops.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Caltrops"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Chakram.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Chakram"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_ClusterArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_ClusterArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Companion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Companion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_ElementalArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_ElementalArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_EntanglingShot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_EntanglingShot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_EvasiveFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_FanOfKnives.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_FanOfKnives"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Grenades.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Grenades"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_HungeringArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_HungeringArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Impale.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Impale"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_MarkedForDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Multishot.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Multishot"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Preparation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Preparation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_RainOfVengeance.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_RainOfVengeance"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_RapidFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_RapidFire"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Sentry.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Sentry"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_ShadowPower.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_ShadowPower"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_SmokeScreen.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_SmokeScreen"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_SpikeTrap.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_SpikeTrap"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Strafe.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Strafe"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Back_Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Back_Vault"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Over_Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Over_Vault"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/DemonHunter/Down_Vault.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_DemonHunter_Down_Vault"), pTexture);

	// AddBuffer - Item - DemonHunterHelms
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_0"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_1"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_2"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_3"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_4"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_5"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_6"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_7"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_8"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_9"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_10"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_11"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_12"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_13"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_14"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_15"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_16"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_17"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_18"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_19"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_20"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_21"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_22"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_23"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_24"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_25"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_26"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_27"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_28"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_29"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_30"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterHelms_31"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterHelms/"), _T("31.X")));

	// AddBuffer - Item - DemonHunterShoulders
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_0"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_1"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_2"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_3"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_4"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_5"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_6"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_7"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_8"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_9"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_10"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_11"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_12"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_13"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_14"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_15"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_16"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_17"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_18"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_19"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_20"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_21"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_22"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_23"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_24"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_25"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_26"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_27"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_28"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_29"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_30"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_DemonHunterShoulders_31"), new CStaticMesh(_T("../Resource/Mesh/Item/DemonHunterShoulders/"), _T("31.X")));

	// AddTexture - Effect
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/ArrowTrail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_ArrowTrail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EntangleShot_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EntangleShot_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/RainOfVengeance_Arrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_RainOfVengeance_Arrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/RainOfVengeance_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_RainOfVengeance_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Impale_Knife.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Impale_Knife"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Impale_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Impale_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FanOfKnives_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FanOfKnives_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/HungeringArrow_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_HungeringArrow_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EvasiveFire.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EvasiveFire"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bola_Arrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bola_Arrow"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bola_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bola_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/RapidFire_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_RapidFire_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb0"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_Bomb12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_Bomb12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Preparation_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Preparation_Decal"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Preparation_Buff.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Preparation_Buff"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/DarkFire_Bomb10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DarkFire_Bomb10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Elemental_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Elemental_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FireEffect59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireEffect59"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Cluster_Arrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Cluster_Arrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Cluster_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Cluster_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Cluster_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Cluster_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MarkedForDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MarkedForDeath"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Strafe_Spin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Strafe_Spin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Strafe_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Strafe_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Strafe_Arrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Strafe_Arrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SmokeScreen_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SmokeScreen_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SmokeScreen_Smoke0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SmokeScreen_Smoke0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SmokeScreen_Smoke1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SmokeScreen_Smoke1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SmokeScreen_Smoke2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SmokeScreen_Smoke2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SmokeScreen_Smoke3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SmokeScreen_Smoke3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SmokeScreen_Smoke4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SmokeScreen_Smoke4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SmokeScreen_Smoke5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SmokeScreen_Smoke5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Trap_Fire9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trap_Fire9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MultiShot_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MultiShot_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Grenades_DecalGlow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Grenades_DecalGlow"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bomb/Bomb0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bomb0"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bomb/Bomb1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bomb1"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bomb/Bomb2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bomb2"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bomb/Bomb3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bomb3"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bomb/Bomb4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bomb4"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bomb/Bomb5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bomb5"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Bomb/Bomb6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Bomb6"), pTexture);	

	// AddBuffer - Effect
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Arrow0"), new CStaticMesh(_T("../Resource/Mesh/Effect/Arrow0/"), _T("Arrow.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Arrow1"), new CStaticMesh(_T("../Resource/Mesh/Effect/Arrow1/"), _T("EntanglingShot.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Impale"), new CStaticMesh(_T("../Resource/Mesh/Effect/Impale/"), _T("Impale.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Chakram"), new CStaticMesh(_T("../Resource/Mesh/Effect/Chakram/"), _T("Chakram.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Grenade"), new CStaticMesh(_T("../Resource/Mesh/Effect/Grenades/"), _T("Grenade.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Sentry_Arrow"), new CStaticMesh(_T("../Resource/Mesh/Effect/Sentry_Arrow/"), _T("Sentry_Arrow.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_ShadowPower_Wing"), new CStaticMesh(_T("../Resource/Mesh/Effect/ShadowPower/"), _T("ShadowPower_Wing.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Sentry"), new CDynamicMesh(_T("../Resource/Mesh/Effect/DemonHunter/Sentry/"), _T("Sentry.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Sentry_Base"), new CStaticMesh(_T("../Resource/Mesh/Effect/DemonHunter/Sentry/"), _T("Sentry_Base.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_SlowTime"), new CStaticMesh(_T("../Resource/Mesh/Effect/SlowTime/"), _T("SlowTime.X")));
}
void CLoadMgr::UnloadForDemonHunter()
{
	// RemoveTexture - SkillWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunter_Archery"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunter_Defensive"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunter_Devices"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunter_Hunting"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunter_Primary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_DemonHunter_Secondary"));

	// RemoveTexture - Energy
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate00"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate01"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate02"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate03"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate04"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate05"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate06"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate07"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate08"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate09"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Hate59"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control00"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control01"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control02"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control03"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control04"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control05"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control06"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control07"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control08"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control09"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Control59"));

	// RemoveTexture - Message
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Vault"));

	// RemoveTexture - Slot
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Back_Vault"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Over_Vault"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Down_Vault"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_DemonHunter_Disable_Vault"));

	// RemoveTexture - Skill
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Bola"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Caltrops"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Chakram"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_ClusterArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Companion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_ElementalArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_EntanglingShot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_EvasiveFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_FanOfKnives"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Grenades"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_HungeringArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Impale"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_MarkedForDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Multishot"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Preparation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_RainOfVengeance"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_RapidFire"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Sentry"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_ShadowPower"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_SmokeScreen"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_SpikeTrap"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Strafe"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Back_Vault"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Over_Vault"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_DemonHunter_Down_Vault"));

	// RemoveBuffer - Item - DemonHunterHelms
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_0")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_1")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_2")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_3")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_4")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_5")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_6")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_7")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_8")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_9")); 
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterHelms_31"));

	// RemoveBuffer - Item - DemonHunterShoulders
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_DemonHunterShoulders_31"));
	// RemoveTexture - Effect
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_ArrowTrail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EntangleShot_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_RainOfVengeance_Arrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_RainOfVengeance_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Impale_Knife"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Impale_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FanOfKnives_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_HungeringArrow_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EvasiveFire"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bola_Arrow"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bola_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_RapidFire_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb0"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_Bomb12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Preparation_Decal"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Preparation_Buff"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DarkFire_Bomb10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Elemental_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireEffect59"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Cluster_Arrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Cluster_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Cluster_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MarkedForDeath"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Strafe_Spin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Strafe_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Strafe_Arrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SmokeScreen_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SmokeScreen_Smoke0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SmokeScreen_Smoke1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SmokeScreen_Smoke2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SmokeScreen_Smoke3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SmokeScreen_Smoke4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SmokeScreen_Smoke5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trap_Fire9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MultiShot_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Grenades_DecalGlow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bomb0"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bomb1"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bomb2"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bomb3"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bomb4"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bomb5"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Bomb6"));	

	// RemoveBuffer - Effect
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Arrow0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Arrow1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Impale"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Chakram"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Grenade"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Sentry_Arrow"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_ShadowPower_Wing"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Sentry"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Sentry_Base"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_SlowTime"));
}

// ForMonk
void CLoadMgr::LoadForMonk()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - SkillWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Monk_Defensive.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Monk_Defensive"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Monk_Focus.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Monk_Focus"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Monk_Mantras.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Monk_Mantras"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Monk_Primary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Monk_Primary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Monk_Secondary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Monk_Secondary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Monk_Techniques.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Monk_Techniques"), pTexture);

	// AddTexture - Effort
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort00.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort00"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort01.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort01"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort02.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort02"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort03.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort03"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort04.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort04"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort05.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort05"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort06.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort06"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort07.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort07"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort08.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort08"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort09.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort09"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Effort59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Effort59"), pTexture);

	// AddTexture - Message
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_WayOfTheHundredFists"), pTexture);

	// AddTexture - Slot
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Back_WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Back_WayOfTheHundredFists"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Over_WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Over_WayOfTheHundredFists"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Down_WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Down_WayOfTheHundredFists"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Monk/Disable_WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Monk_Disable_WayOfTheHundredFists"), pTexture);

	// AddTexture - Skill
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_BlindingFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_BlindingFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_BreathOfHeaven.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_BreathOfHeaven"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_CripplingWave.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_CripplingWave"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_CycloneStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_CycloneStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_DashingStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_DashingStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_DeadlyReach.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_DeadlyReach"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_ExplodingPalm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_ExplodingPalm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_FistsOfThunder.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_FistsOfThunder"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_InnerSanctuary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_InnerSanctuary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_MantraOfConviction.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_MantraOfConviction"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_MantraOfHealing.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_MantraOfHealing"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_MantraOfRetribution.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_MantraOfRetribution"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_MantraOfSalvation.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_MantraOfSalvation"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_MysticAlly.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_MysticAlly"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_Serenity.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_Serenity"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_SevenSidedStrike.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_SevenSidedStrike"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_SweepingWind.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_SweepingWind"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_TempestRush.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_TempestRush"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_WaveOfLight.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_WaveOfLight"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Back_WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Back_WayOfTheHundredFists"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Over_WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Over_WayOfTheHundredFists"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Monk/Down_WayOfTheHundredFists.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Monk_Down_WayOfTheHundredFists"), pTexture);

	//AddBuffer - Item - MonkHelms
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_0"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_1"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_2"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_3"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_4"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_5"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_6"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_7"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_8"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_9"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_10"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_11"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_12"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_13"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_14"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_15"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_16"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_17"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_18"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_19"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_20"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_21"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_22"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_23"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_24"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_25"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_26"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_27"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_28"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_29"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_30"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkHelms_31"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkHelms/"), _T("31.X")));

	// AddBuffer - Item - MonkShoulders
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_0"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_1"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_2"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_3"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_4"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_5"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_6"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_7"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_8"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_9"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_10"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_11"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_12"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_13"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_14"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_15"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_16"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_17"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_18"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_19"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_20"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_21"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_22"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_23"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_24"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_25"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_26"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_27"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_28"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_29"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_30"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_MonkShoulders_31"), new CStaticMesh(_T("../Resource/Mesh/Item/MonkShoulders/"), _T("31.X")));

	// AddTexture - Effect
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfRetribution_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfRetribution_Decal"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfRetribution_DecalGlow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfRetribution_DecalGlow"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfRetribution_Particle.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfRetribution_Particle"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfHealing_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfHealing_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfHealing_DecalGlow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfHealing_DecalGlow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfHealing_DecalRun.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfHealing_DecalRun"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfConviction_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfConviction_Decal"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfSalvation_InnerDecal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfSalvation_InnerDecal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/MantraOfSalvation_OuterDecal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MantraOfSalvation_OuterDecal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/CripplingWave_Attack3_Alpha.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_CripplingWave_Attack3_Alpha"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/CripplingWave_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_CripplingWave_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/FistsOfThunder_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FistsOfThunder_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/InnerSanctuary_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_InnerSanctuary_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/BreathOfHeaven_Alpha.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BreathOfHeaven_Alpha"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/BreathOfHeaven_Flash0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BreathOfHeaven_Flash0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/BreathOfHeaven_Flash1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BreathOfHeaven_Flash1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/BreathOfHeaven_Flash2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BreathOfHeaven_Flash2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/BreathOfHeaven_Flash3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BreathOfHeaven_Flash3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/BreathOfHeaven_UpFlash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_BreathOfHeaven_UpFlash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/SevenSidedStrike_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SevenSidedStrike_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/SevenSidedStrike_DecalGlow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SevenSidedStrike_DecalGlow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/SevenSidedStrike_Rune.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SevenSidedStrike_Rune"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/DeadlyReach_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_DeadlyReach_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/LashingTailKick.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LashingTailKick"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/Serenity_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Serenity_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/WayOfTheHundredFists_ShockWaveDecal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_WayOfTheHundredFists_ShockWaveDecal"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/CripplingWave_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_CripplingWave_Decal"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Monk/CripplingWave_DecalGlow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_CripplingWave_DecalGlow"), pTexture);	

	// AddBuffer - Effect
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_HealingNova"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/HealingNova/"), _T("HealingNova.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_CripplingWave_Attack3"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/CripplingWave_Attack3/"), _T("CripplingWave_Attack3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_SlowTime"), new CStaticMesh(_T("../Resource/Mesh/Effect/SlowTime/"), _T("SlowTime.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_TempestRush_Staff"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/TempestRush_Staff/"), _T("TempestRush_Staff.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_WaveOfLight"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/WaveOfLight/"), _T("WaveOfLight.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_WaveOfLight_Destroy"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/WaveOfLight/"), _T("WaveOfLight_Destroy.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_BlindingFlash"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/BlindingFlash/"), _T("BlindingFlash.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_CycloneStrike_Nova"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/CycloneStrike_Nova/"), _T("CycloneStrike_Nova.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_SevenSidedStrike"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/SevenSidedStrike/"), _T("SevenSidedStrike.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_SevenSidedStrike_Flash"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/SevenSidedStrike_Flash/"), _T("SevenSidedStrike_Flash.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_SweepingWind"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/SweepingWind/"), _T("SweepingWind.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_WayOfTheHundredFists_Shadow"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/WayOfTheHundredFists/"), _T("WayOfTheHundredFists_Shadow.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Serenity_BlastWave"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/Serenity_BlastWave/"), _T("Serenity_BlastWave.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Salvation_Nova"), new CStaticMesh(_T("../Resource/Mesh/Effect/Monk/Salvation_Nova/"), _T("Salvation_Nova.X")));
}
void CLoadMgr::UnloadForMonk()
{
	// RemoveTexture - SkillWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Monk_Defensive"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Monk_Focus"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Monk_Mantras"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Monk_Primary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Monk_Secondary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Monk_Techniques"));

	// RemoveTexture - Effort
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort00"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort01"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort02"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort03"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort04"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort05"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort06"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort07"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort08"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort09"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Effort59"));

	// RemoveTexture - Message
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_WayOfTheHundredFists"));

	// RemoveTexture - Slot
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Back_WayOfTheHundredFists"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Over_WayOfTheHundredFists"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Down_WayOfTheHundredFists"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Monk_Disable_WayOfTheHundredFists"));

	// RemoveTexture - Skill
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_BlindingFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_BreathOfHeaven"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_CripplingWave"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_CycloneStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_DashingStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_DeadlyReach"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_ExplodingPalm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_FistsOfThunder"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_InnerSanctuary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_MantraOfConviction"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_MantraOfHealing"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_MantraOfRetribution"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_MantraOfSalvation"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_MysticAlly"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_Serenity"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_SevenSidedStrike"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_SweepingWind"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_TempestRush"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_WaveOfLight"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Back_WayOfTheHundredFists"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Over_WayOfTheHundredFists"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Monk_Down_WayOfTheHundredFists"));

	// RemoveBuffer - Item - MonkHelms
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkHelms_31"));

	// RemoveBuffer - Item - MonkShoulders
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_MonkShoulders_31"));

	// RemoveTexture - Effect
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfRetribution_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfRetribution_DecalGlow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfRetribution_Particle"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfHealing_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfHealing_DecalGlow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfHealing_DecalRun"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfConviction_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfSalvation_OuterDecal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MantraOfSalvation_InnerDecal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_CripplingWave_Attack3_Alpha"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_CripplingWave_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FistsOfThunder_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_InnerSanctuary_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BreathOfHeaven_Alpha"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BreathOfHeaven_Flash0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BreathOfHeaven_Flash1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BreathOfHeaven_Flash2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BreathOfHeaven_Flash3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_BreathOfHeaven_UpFlash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SevenSidedStrike_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SevenSidedStrike_DecalGlow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SevenSidedStrike_Rune"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_DeadlyReach_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LashingTailKick"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Serenity_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_WayOfTheHundredFists_ShockWaveDecal"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_CripplingWave_Decal"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_CripplingWave_DecalGlow"));	
	
	// RemoveBuffer - Effect
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_HealingNova"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_CripplingWave_Attack3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_SlowTime"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_TempestRush_Staff"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_WaveOfLight"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_WaveOfLight_Destroy"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_BlindingFlash"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_CycloneStrike_Nova"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_SevenSidedStrike"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_SevenSidedStrike_Flash"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_SweepingWind"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_WayOfTheHundredFists_Shadow"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Serenity_BlastWave"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Salvation_Nova"));
}

// ForWitchDoctor
void CLoadMgr::LoadForWitchDoctor()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - SkillWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctor_Decay.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctor_Decay"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctor_Defensive.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctor_Defensive"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctor_Primary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctor_Primary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctor_Secondary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctor_Secondary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctor_Terror.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctor_Terror"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/WitchDoctor_Voodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_WitchDoctor_Voodoo"), pTexture);

	// AddTexture - Energy
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana00.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana00"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana01.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana01"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana02.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana02"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana03.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana03"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana04.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana04"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana05.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana05"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana06.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana06"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana07.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana07"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana08.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana08"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana09.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana09"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Mana59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Mana59"), pTexture);

	// AddTexture - Message
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ZombieCharger"), pTexture);

	// AddTexture - Slot
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Back_ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Back_ZombieCharger"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Over_ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Over_ZombieCharger"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Down_ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Down_ZombieCharger"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/WitchDoctor/Disable_ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_WitchDoctor_Disable_ZombieCharger"), pTexture);

	// AddTexture - Skill
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_AcidCloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_AcidCloud"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_BigBadVoodoo.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_BigBadVoodoo"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_CorpseSpiders.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_CorpseSpiders"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_FetishArmy.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_FetishArmy"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Firebats.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Firebats"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Firebomb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Firebomb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Gargantuan.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Gargantuan"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_GraspOfTheDead.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_GraspOfTheDead"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Haunt.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Haunt"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Hex.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Hex"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Horrify.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Horrify"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_LocustSwarm.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_LocustSwarm"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_MassConfusion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_MassConfusion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_PlagueOfToads.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_PlagueOfToads"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_PoisonDart.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_PoisonDart"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_Sacrifice.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_Sacrifice"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_SoulHarvest.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_SoulHarvest"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_SpiritBarrage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_SpiritBarrage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_SpiritWalk.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_SpiritWalk"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_SummonZombieDogs.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_SummonZombieDogs"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_WallOfDeath.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_WallOfDeath"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Back_ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Back_ZombieCharger"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Over_ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Over_ZombieCharger"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/WitchDoctor/Down_ZombieCharger.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_WitchDoctor_Down_ZombieCharger"), pTexture);

	// AddBuffer - Item - WitchDoctorHelms
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_0"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_1"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_2"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_3"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_4"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_5"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_6"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_7"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_8"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_9"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_10"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_11"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_12"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_13"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_14"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_15"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_16"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_17"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_18"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_19"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_20"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_21"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_22"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_23"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_24"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_25"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_26"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_27"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_28"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_29"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_30"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorHelms_31"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorHelms/"), _T("31.X")));

	// AddBuffer - Item - WitchDoctorShoulders
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_0"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_1"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_2"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_3"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_4"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_5"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_6"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_7"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_8"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_9"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_10"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_11"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_12"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_13"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_14"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_15"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_16"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_17"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_18"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_19"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_20"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_21"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_22"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_23"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_24"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_25"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_26"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_27"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_28"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_29"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_30"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WitchDoctorShoulders_31"), new CStaticMesh(_T("../Resource/Mesh/Item/WitchDoctorShoulders/"), _T("31.X")));

	// AddTexture - Effect
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/Trail_Poison.dds"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Trail_Poison"), pTexture);
	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/FireBats/FireBats30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FireBats30"), pTexture);

	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_1"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_2"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_3"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_4"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_5"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_6"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_7"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_12"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_15"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_16"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_17"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_19"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_20"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_21"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_22"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_23"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_24"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_25"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_26"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_27"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_29"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_30"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_31"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_32"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_33"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_34"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_35"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_36"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_37"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_40"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_42"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_43"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_44"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_45"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_46"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_47"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_50"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_52"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_53"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_54"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_55"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_56"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_57"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_58"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_59"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_60.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_60"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_61.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_61"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_62.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_62"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/Locusts_63.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Locusts_63"), pTexture);
	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/WitchDoctor/LocustsSwarm/LocustsSwarm_Cloud.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_LocustsSwarm_Cloud"), pTexture);

	

	// AddBuffer - Effect
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_PoisonDart"), new CStaticMesh(_T("../Resource/Mesh/Effect/WitchDoctor/PoisonDart/"), _T("PoisonDart.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_CorpseSpider_Jar"), new CDynamicMesh(_T("../Resource/Mesh/Effect/WitchDoctor/CorpseSpider/"), _T("CorpseSpider_Jar.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_CorpseSpider_Spider"), new CDynamicMesh(_T("../Resource/Mesh/Effect/WitchDoctor/CorpseSpider/"), _T("CorpseSpider_Spider.X")));
}
void CLoadMgr::UnloadForWitchDoctor()
{
	// RemoveTexture - SkillWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctor_Decay"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctor_Defensive"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctor_Primary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctor_Secondary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctor_Terror"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_WitchDoctor_Voodoo"));

	// RemoveTexture - Energy
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana00"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana01"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana02"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana03"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana04"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana05"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana06"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana07"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana08"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana09"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Mana59"));

	// RemoveTexture - Message
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ZombieCharger"));

	// RemoveTexture - Slot
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Back_ZombieCharger"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Over_ZombieCharger"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Down_ZombieCharger"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_WitchDoctor_Disable_ZombieCharger"));

	// RemoveTexture - Skill
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_AcidCloud"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_BigBadVoodoo"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_CorpseSpiders"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_FetishArmy"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Firebats"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Firebomb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Gargantuan"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_GraspOfTheDead"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Haunt"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Hex"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Horrify"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_LocustSwarm"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_MassConfusion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_PlagueOfToads"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_PoisonDart"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_Sacrifice"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_SoulHarvest"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_SpiritBarrage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_SpiritWalk"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_SummonZombieDogs"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_WallOfDeath"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Back_ZombieCharger"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Over_ZombieCharger"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_WitchDoctor_Down_ZombieCharger"));

	// RemoveBuffer - Item - WitchDoctorHelms
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorHelms_31"));

	// RemoveBuffer - Item - WitchDoctorShoulders
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WitchDoctorShoulders_31"));

	// RemoveTexture - Effect
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Trail_Poison"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FireBats30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_1"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_2"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_3"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_4"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_5"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_6"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_7"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_12"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_15"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_16"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_17"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_19"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_20"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_21"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_22"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_23"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_24"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_25"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_26"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_27"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_29"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_30"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_31"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_32"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_33"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_34"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_35"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_36"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_37"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_40"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_42"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_43"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_44"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_45"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_46"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_47"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_50"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_52"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_53"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_54"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_55"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_56"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_57"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_58"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_59"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_60"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_61"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_62"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Locusts_63"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_LocustsSwarm_Cloud"));
	
	// RemoveBuffer - Effect
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_PoisonDart"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_CorpseSpider_Jar"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_CorpseSpider_Spider"));

}

// ForWizard
void CLoadMgr::LoadForWizard()
{
	// Texture
	LPDIRECT3DBASETEXTURE9 pTexture;

	// AddTexture - SkillWindow
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Wizard_Conjuration.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Wizard_Conjuration"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Wizard_Defensive.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Wizard_Defensive"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Wizard_Force.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Wizard_Force"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Wizard_Mastery.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Wizard_Mastery"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Wizard_Primary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Wizard_Primary"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Window/Wizard_Secondary.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Window_Wizard_Secondary"), pTexture);

	// AddTexture - Vision
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision00.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision00"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision01.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision01"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision02.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision02"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision03.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision03"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision04.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision04"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision05.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision05"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision06.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision06"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision07.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision07"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision08.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision08"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision09.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision09"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Energy/Vision59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Energy_Vision59"), pTexture);

	// AddTexture - Message
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Message/WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Message_WaveOfForce"), pTexture);

	// AddTexture - Slot
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Potion.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Potion"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Back_WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Back_WaveOfForce"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Over_WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Over_WaveOfForce"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Down_WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Down_WaveOfForce"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Slot/Wizard/Disable_WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Slot_Wizard_Disable_WaveOfForce"), pTexture);

	// AddTexture - Skill
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Close.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Close"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Open.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Open"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Punch.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Punch"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_NearAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_NearAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_FarAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_FarAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_MagicAttack.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_MagicAttack"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_ArcaneOrb.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_ArcaneOrb"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_ArcaneTorrent.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_ArcaneTorrent"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Archon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Archon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Blizzard.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Blizzard"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_DiamondSkin.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_DiamondSkin"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Disintegrate.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Disintegrate"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Electrocute.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Electrocute"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_EnergyArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_EnergyArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_EnergyTwister.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_EnergyTwister"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_ExplosiveBlast.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_ExplosiveBlast"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Familiar.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Familiar"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Hydra.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Hydra"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_IceArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_IceArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_MagicMissile.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_MagicMissile"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_MagicWeapon.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_MagicWeapon"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Meteor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Meteor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_MirrorImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_MirrorImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_RayOfFrost.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_RayOfFrost"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_ShockPulse.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_ShockPulse"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_SlowTime.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_SlowTime"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_SpectralBlade.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_SpectralBlade"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_StormArmor.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_StormArmor"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_Teleport.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_Teleport"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Back_WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Back_WaveOfForce"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Over_WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Over_WaveOfForce"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Skill/Wizard/Down_WaveOfForce.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Skill_Wizard_Down_WaveOfForce"), pTexture);

	// AddBuffer - Item - WizardHelms
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_0"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_1"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_2"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_3"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_4"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_5"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_6"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_7"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_8"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_9"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_10"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_11"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_12"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_13"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_14"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_15"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_16"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_17"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_18"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_19"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_20"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_21"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_22"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_23"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_24"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_25"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_26"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_27"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_28"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_29"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_30"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardHelms_31"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardHelms/"), _T("31.X")));

	// AddBuffer - Item - WizardShoulders
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_0"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("0.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_1"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("1.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_2"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("2.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_3"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("3.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_4"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("4.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_5"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("5.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_6"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("6.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_7"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("7.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_8"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("8.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_9"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("9.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_10"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("10.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_11"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("11.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_12"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("12.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_13"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("13.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_14"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("14.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_15"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("15.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_16"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("16.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_17"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("17.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_18"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("18.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_19"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("19.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_20"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("20.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_21"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("21.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_22"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("22.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_23"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("23.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_24"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("24.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_25"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("25.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_26"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("26.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_27"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("27.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_28"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("28.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_29"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("29.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_30"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("30.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Item_WizardShoulders_31"), new CStaticMesh(_T("../Resource/Mesh/Item/WizardShoulders/"), _T("31.X")));

	// AddTexture - Effect
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Blue0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Blue0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Blue1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Blue1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Blue2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Blue2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Blue3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Blue3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Strike_Blue0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Strike_Blue0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Strike_Blue1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Strike_Blue1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Strike_Blue2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Strike_Blue2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Lightning_Strike_Blue3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Lightning_Strike_Blue3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Teleport_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Teleport_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicMissile0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicMissile0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicMissile1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicMissile1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicMissile2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicMissile2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicMissile_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicMissile_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/ArcaneTorrent_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_ArcaneTorrent_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/ArcaneTorrent_DestoryEffect.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_ArcaneTorrent_DestoryEffect"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/ArcaneTorrent_ArrowTrail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_ArcaneTorrent_ArrowTrail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/RayOfFrost_Ray.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_RayOfFrost_Ray"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyTwister_TwisterEffect.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyTwister_TwisterEffect"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/waveOfForce_alpha.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_waveOfForce_alpha"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Snow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Snow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Disintegrate_Ray.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Disintegrate_Ray"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyArmor_BuffCasting0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyArmor_BuffCasting0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyArmor_BuffCasting1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyArmor_BuffCasting1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyArmor_BuffCasting2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyArmor_BuffCasting2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyArmor_BuffCasting3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyArmor_BuffCasting3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyArmor_BuffCasting4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyArmor_BuffCasting4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyArmor_BuffCasting5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyArmor_BuffCasting5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/EnergyArmor_BuffCasting6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_EnergyArmor_BuffCasting6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Lightning7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Lightning7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/StormArmor_Flash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_StormArmor_Flash"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/FrostNova.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_FrostNova"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/NovaArrow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_NovaArrow"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicWeapon_Casting0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicWeapon_Casting0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicWeapon_Casting1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicWeapon_Casting1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicWeapon_Casting2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicWeapon_Casting2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicWeapon_Casting3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicWeapon_Casting3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicWeapon_Casting4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicWeapon_Casting4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicWeapon_Casting5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicWeapon_Casting5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/MagicWeapon_Casting6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_MagicWeapon_Casting6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Blizzard_Destory0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Blizzard_Destory0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Blizzard_Destory1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Blizzard_Destory1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Blizzard_Destory2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Blizzard_Destory2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Blizzard_Destory3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Blizzard_Destory3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Trail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Trail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Familiar_AfterImage.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Familiar_AfterImage"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/SpectralBlade_Casting12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_SpectralBlade_Casting12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Arcane_galaxy_Alpha.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Arcane_galaxy_Alpha"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Arcane_galaxy_Blend.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Arcane_galaxy_Blend"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Arcane_galaxy_Diff.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Arcane_galaxy_Diff"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Ring.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Ring"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Decal.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Decal"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_DecalGlow.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_DecalGlow"), pTexture);	
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory0.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory0"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory1.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory1"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory2.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory2"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory3.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory3"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory4.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory4"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory5.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory5"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory6.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory6"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory7.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory7"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory8.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory8"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory9.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory9"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory10.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory10"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory11.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory11"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory12.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory12"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory13.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory13"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory14.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory14"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory15.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory15"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory16.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory16"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory17.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory17"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory18.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory18"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory19.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory19"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory20.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory20"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory21.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory21"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory22.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory22"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory23.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory23"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory24.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory24"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory25.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory25"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory26.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory26"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory27.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory27"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory28.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory28"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory29.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory29"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory30.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory30"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory31.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory31"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory32.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory32"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory33.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory33"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory34.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory34"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory35.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory35"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory36.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory36"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory37.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory37"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory38.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory38"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory39.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory39"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory40.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory40"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory41.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory41"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory42.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory42"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory43.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory43"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory44.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory44"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory45.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory45"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory46.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory46"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory47.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory47"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory48.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory48"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory49.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory49"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory50.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory50"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory51.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory51"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory52.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory52"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory53.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory53"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory54.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory54"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory55.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory55"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory56.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory56"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory57.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory57"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory58.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory58"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory59.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory59"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory60.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory60"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/Meteor_Destory61.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_Meteor_Destory61"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/ArrowTrail.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_ArrowTrail"), pTexture);
	if(FAILED(D3DXCreateTextureFromFile(CDeviceMgr::GetInstance()->GetDevice(), _T("../Resource/Texture/Effect/blizzard_splash.png"), (LPDIRECT3DTEXTURE9*)&pTexture))) { cout << "D3DXCreateTextureFromFile() Failed!" << endl; }
	CTextureMgr::GetInstance()->AddTexture(_T("Effect_blizzard_splash"), pTexture);	
	
	// AddBuffer - Effect
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_SlowTime"), new CStaticMesh(_T("../Resource/Mesh/Effect/SlowTime/"), _T("SlowTime.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_WaveOfForce"), new CStaticMesh(_T("../Resource/Mesh/Effect/WaveOfForce/"), _T("WaveOfForce.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Twister"), new CDynamicMesh(_T("../Resource/Mesh/Effect/Twister/"), _T("Twister.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Disintegrate_Flash"), new CStaticMesh(_T("../Resource/Mesh/Effect/Disintegrate_Flash/"), _T("Disintegrate_Flash.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_EnergyArmor"), new CStaticMesh(_T("../Resource/Mesh/Effect/EnergyArmor/"), _T("EnergyArmor.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_IceArmor"), new CStaticMesh(_T("../Resource/Mesh/Effect/IceArmor/"), _T("IceArmor.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Blizzard"), new CStaticMesh(_T("../Resource/Mesh/Effect/Blizzard/"), _T("Blizzard.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_ExplosiveBlast"), new CStaticMesh(_T("../Resource/Mesh/Effect/ExplosiveBlast/"), _T("ExplosiveBlast.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Arcane_Orb"), new CStaticMesh(_T("../Resource/Mesh/Effect/ArcaneOrb/"), _T("Arcane_Orb.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Meteor"), new CStaticMesh(_T("../Resource/Mesh/Effect/Meteor/"), _T("Meteor.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Hydra"), new CDynamicMesh(_T("../Resource/Mesh/Effect/Hydra/"), _T("Hydra.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Hydra_FireBall"), new CStaticMesh(_T("../Resource/Mesh/Effect/Hydra_FireBall/"), _T("Hydra_FireBall.X")));	
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Arrow0"), new CStaticMesh(_T("../Resource/Mesh/Effect/Arrow0/"), _T("Arrow.X")));
	CBufferMgr::GetInstance()->AddBuffer(_T("Effect_Blizzard_Cloud"), new CStaticMesh(_T("../Resource/Mesh/Effect/Blizzard/"), _T("Blizzard_Cloud.X")));
}
void CLoadMgr::UnloadForWizard()
{
	// RemoveTexture - SkillWindow
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Wizard_Conjuration"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Wizard_Defensive"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Wizard_Force"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Wizard_Mastery"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Wizard_Primary"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Window_Wizard_Secondary"));

	// RemoveTexture - Vision
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision00"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision01"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision02"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision03"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision04"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision05"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision06"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision07"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision08"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision09"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Energy_Vision59"));

	// RemoveTexture - Message
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Message_WaveOfForce"));

	// RemoveTexture - Slot
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Potion"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Back_WaveOfForce"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Over_WaveOfForce"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Down_WaveOfForce"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Slot_Wizard_Disable_WaveOfForce"));

	// RemoveTexture - Skill
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Close"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Open"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Punch"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_NearAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_FarAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_MagicAttack"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_ArcaneOrb"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_ArcaneTorrent"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Archon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Blizzard"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_DiamondSkin"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Disintegrate"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Electrocute"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_EnergyArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_EnergyTwister"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_ExplosiveBlast"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Familiar"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Hydra"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_IceArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_MagicMissile"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_MagicWeapon"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Meteor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_MirrorImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_RayOfFrost"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_ShockPulse"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_SlowTime"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_SpectralBlade"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_StormArmor"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_Teleport"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Back_WaveOfForce"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Over_WaveOfForce"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Skill_Wizard_Down_WaveOfForce"));

	// RemoveBuffer - Item - WizardHelms
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardHelms_31"));

	// RemoveBuffer - Item - WizardShoulders
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_1"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_2"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_3"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_4"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_5"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_6"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_7"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_8"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_9"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_10"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_11"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_12"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_13"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_14"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_15"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_16"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_17"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_18"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_19"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_20"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_21"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_22"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_23"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_24"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_25"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_26"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_27"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_28"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_29"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_30"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Item_WizardShoulders_31"));

	// RemoveTexture - Effect
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Blue0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Blue1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Blue2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Blue3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Strike_Blue0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Strike_Blue1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Strike_Blue2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Lightning_Strike_Blue3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Teleport_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicMissile0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicMissile1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicMissile2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicMissile_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_ArcaneTorrent_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_ArcaneTorrent_DestoryEffect"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_ArcaneTorrent_ArrowTrail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_RayOfFrost_Ray"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyTwister_TwisterEffect"));	
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_waveOfForce_alpha"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Snow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Disintegrate_Ray"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyArmor_BuffCasting0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyArmor_BuffCasting1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyArmor_BuffCasting2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyArmor_BuffCasting3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyArmor_BuffCasting4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyArmor_BuffCasting5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_EnergyArmor_BuffCasting6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Lightning7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_StormArmor_Flash"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_FrostNova"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_NovaArrow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicWeapon_Casting0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicWeapon_Casting1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicWeapon_Casting2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicWeapon_Casting3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicWeapon_Casting4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicWeapon_Casting5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_MagicWeapon_Casting6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Blizzard_Destory0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Blizzard_Destory1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Blizzard_Destory2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Blizzard_Destory3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Trail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Familiar_AfterImage"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_SpectralBlade_Casting12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Arcane_galaxy_Alpha"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Arcane_galaxy_Blend"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Arcane_galaxy_Diff"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Ring"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Decal"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_DecalGlow"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory0"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory1"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory2"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory3"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory4"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory5"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory6"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory7"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory8"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory9"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory10"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory11"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory12"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory13"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory14"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory15"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory16"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory17"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory18"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory19"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory20"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory21"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory22"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory23"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory24"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory25"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory26"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory27"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory28"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory29"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory30"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory31"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory32"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory33"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory34"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory35"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory36"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory37"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory38"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory39"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory40"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory41"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory42"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory43"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory44"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory45"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory46"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory47"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory48"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory49"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory50"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory51"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory52"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory53"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory54"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory55"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory56"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory57"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory58"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory59"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory60"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_Meteor_Destory61"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_ArrowTrail"));
	CTextureMgr::GetInstance()->RemoveTexture(_T("Effect_blizzard_splash"));	
		
	// RemoveBuffer - Effect
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_SlowTime"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_WaveOfForce"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Twister"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Disintegrate_Flash"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_EnergyArmor"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_IceArmor"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Blizzard"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_ExplosiveBlast"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Arcane_Orb"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Meteor"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Hydra"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Hydra_FireBall"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Arrow0"));
	CBufferMgr::GetInstance()->RemoveBuffer(_T("Effect_Blizzard_Cloud"));
}